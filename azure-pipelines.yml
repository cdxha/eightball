# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main
pool:
  name: lab.devsecops.com
steps:
- task: Bash@3
  displayName: Fortify Rulepack Gate
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      # Define variables
      fortify_url="https://lab.devsecops.com:8443/ssc/api/v1"
      fortify_token="YWE4ZDgwM2ItNDQ0Yy00ZDkwLWFkOTItZDc3YmEzM2IyYzk4"
      app_name="configuration"
      app_version="dev"
      rulepack_gate=""
      issue_priority=""

      # Define headers
      headers=(-H "Accept: application/json" -H "Authorization: FortifyToken $fortify_token")

      # Function to execute SQL query and handle errors
      execute_sql_query() {
          local query="$1"
          sqlcmd -S "$DB_SERVER" -U "$DB_USER" -P "$DB_PASS" -d "$DB_NAME" -Q "$query" -s"," -W | tr -d '\r'
      }

      # HTTP request to list applications
      response=$(curl -sS -k -w "\n%{http_code}" "${fortify_url}/projects?start=0&limit=200&q=name%3A${app_name}&fulltextsearch=false" "${headers[@]}")
      status_code=$(echo "$response" | tail -n1)
      response_body=$(echo "$response" | sed '$d')
      if [ "$status_code" -ne 200 ]; then
          echo "Error in /projects API request. Return code $status_code"
          exit 1
      fi
      app_id=$(echo "$response_body" | jq -r '.data[0].id')

      # HTTP request to list application versions
      response=$(curl -sS -k -w "\n%{http_code}" "${fortify_url}/projects/${app_id}/versions?start=0&limit=0&q=name%3A${app_version}&fulltextsearch=false" "${headers[@]}")
      status_code=$(echo "$response" | tail -n1)
      response_body=$(echo "$response" | sed '$d')
      if [ "$status_code" -ne 200 ]; then
          echo "Error in /projects/${app_id}/versions API request. Return code $status_code"
          exit 1
      fi
      version_id=$(echo "$response_body" | jq -r '.data[0].id')

      # HTTP request to list issues of the application version
      response=$(curl -sS -k -w "\n%{http_code}" "${fortify_url}/projectVersions/${version_id}/issues?start=0&limit=0&fields=issueName%2Cfriority%2CprimaryTag%2CissueInstanceId%2CprimaryRuleGuid&showhidden=false&showremoved=false&showsuppressed=false&showshortfilenames=false" "${headers[@]}")
      status_code=$(echo "$response" | tail -n1)
      response_body=$(echo "$response" | sed '$d')
      if [ "$status_code" -ne 200 ]; then
          echo "Error in /projectVersions/${version_id}/issues API request. Return code $status_code"
          exit 1
      fi

      # Process the JSON and extract primaryRuleGuids
      primaryRuleGuids=$(echo "$response_body" | jq -r '.data[].primaryRuleGuid')

      # Set database connection details
      DB_SERVER="lab.devsecops.com,1435"
      DB_USER="sa"
      DB_PASS="t3cn0l0gi4!"
      DB_NAME="sscdb"

      # Iterate through each primaryRuleGuid
      for guid in $primaryRuleGuids; do
          echo "Querying for Issue primaryRuleGuid: $guid"

          # Execute SQL query to obtain rulepack_id
          rulepack_ids=$(execute_sql_query "
              SELECT rulepack_id
              FROM ruledescription
              WHERE guid = '$guid' ")

          # Check if rulepack_ids is not empty before processing
          if [ -n "$rulepack_ids" ]; then
              # Convert the comma-separated list into an array
              IFS=',' read -r -a rulepack_array <<< "$rulepack_ids"

              # Iterate over each rulepack_id
              for rulepack_id in "${rulepack_array[@]}"; do
                  # Query database for rulepack details
                  rulepack_result=$(execute_sql_query "
                      SELECT name, versionNumber, rulepackType, locale, progLanguage
                      FROM rulepack
                      WHERE id = $rulepack_id ")

                  # Check if any rows were returned
                  if [ -n "$rulepack_result" ]; then
                      echo "$rulepack_result"
                  else
                      echo "No rulepack found for id: $rulepack_id"
                  fi
              done
          else
              echo "No rulepack IDs found for guid $guid."
          fi
      done
